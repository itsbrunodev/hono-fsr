import path from "node:path";
import { pathToFileURL } from "node:url";
import { type DiscoveredRoute, VALID_METHODS } from "./types";

export async function generateRpcTypes(
	routes: DiscoveredRoute[],
	rootDir: string,
): Promise<string> {
	const imports: string[] = [];
	const chain: string[] = [];
	let counter = 0;

	const rootPath = path.resolve(process.cwd(), rootDir);

	const modules = await Promise.all(
		routes.map(
			(route) => import(/* @vite-ignore */ pathToFileURL(route.filePath).href),
		),
	);

	for (let i = 0; i < routes.length; i++) {
		const route = routes[i];

		if (route.type === "middleware") {
			continue;
		}

		const module = modules[i];
		const moduleAlias = `m${counter++}`;

		const relativePath = path
			.relative(rootPath, route.filePath)
			.replace(/\\/g, "/")
			.replace(/\.(ts|js|mjs|mts|cjs)$/, "");

		imports.push(`import * as ${moduleAlias} from "./${relativePath}";`);

		for (const method of VALID_METHODS) {
			const handler = module[method];
			if (handler) {
				// check if the handler is an array (created with createRoute)
				// if so, spread it to preserve types, otherwise, use it directly
				const handlerString = Array.isArray(handler)
					? `...${moduleAlias}.${method}`
					: `${moduleAlias}.${method}`;

				chain.push(
					`.${method.toLowerCase()}("${route.urlPath}", ${handlerString})`,
				);
			}
		}

		// handle default export as a GET request if no explicit GET is defined
		if (!module.GET && module.default) {
			const handler = module.default;
			const handlerString = Array.isArray(handler)
				? `...${moduleAlias}.default`
				: `${moduleAlias}.default`;
			chain.push(`.get("${route.urlPath}", ${handlerString})`);
		}
	}

	const content = `// Auto-generated by hono-fsr, do not edit.

import { Hono } from "hono";

${imports.join("\n")}

export const app = new Hono()
	${chain.join("\n  ")};

export type RpcType = typeof app;
`;

	return content;
}
